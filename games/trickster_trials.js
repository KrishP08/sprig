/*
@title: trickster_trials
@description: Hard troll puzzle game full of traps, disappearing floors, moving spikes, and fake walls!
@author: Yax
@tags: ['troll', 'puzzle', 'trap']
@addedOn: 2025-08-24
*/

const player = "p";
const goal = "g";
const wall = "w";
const spike = "s";
const trap = "t";   // skull trap
const floor = "f";  // disappearing floor
const mover = "m";  // moving spike
const hidden = "h"; // hidden trap
const fakeWall = "x"; // fake wall (looks real, no collision)

setLegend(
  [ player, bitmap`
.......00.......
......0..0......
......0..0......
......0..0......
.......00.......
......0000......
.....0.00.0.....
.....0....0.....
.....0....0.....
.....0....0.....
.....0....0.....
......0000......
.......00.......
................
................
................`],
  [ goal, bitmap`
................
................
................
.....4444.......
....4....4......
...4......4.....
...4......4.....
...4......4.....
...4......4.....
...4......4.....
....4....4......
.....4444.......
................
................
................
................`],
  [ wall, bitmap`
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111`],
  [ fakeWall, bitmap`
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111
1111111111111111`], // looks like wall, but not solid!
  [ spike, bitmap`
................
................
....666666......
....6....6......
....6....6......
....6....6......
....666666......
.....66..66.....
......6..6......
.......66.......
................
................
................
................
................
................`],
  [ trap, bitmap`
................
................
.....2222.......
....2....2......
...2.22..22.....
...2..22..2.....
...2..22..2.....
...2..22..2.....
...2..22..2.....
...2..22..2.....
....2....2......
.....2222.......
................
................
................
................`],
  [ floor, bitmap`
................
................
................
....888888......
....8....8......
....8....8......
....888888......
................
................
................
................
................
................
................
................
................`],
  [ mover, bitmap`
................
................
....333333......
....3....3......
....3....3......
....333333......
....3....3......
....3....3......
....333333......
................
................
................
................
................
................
................`],
  [ hidden, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................`] // invisible trap tile!
);

let level = 0;
let deaths = 0;

const levels = [
  map`
p..g
....
....
....`,
  map`
p..t
.t.t
.t.t
..g.`,
  map`
p.tg
..w.
..x.
..w.`,
  map`
p...
.w.w
.t.g
x...`,
  map`
  p.......g
  x.xxwxx.x
  ..w..w..x
  ..x..x..x
  ..wxxw..x
  ..w......
  xxxxxxxxx`,
  map`
  p....wg..
  xxxx..xx.
  ..w....x.
  ..w.xx.x.
  ..w.xx.x.
  ..x....x.
  xxxxxxxxx`,
  map`
  p..x....g
  x..x..w.x
  x..x..w.x
  x..xxx..x
  x..w....x
  x..xxxxx.
  x........`,
  map`
  pxxxwxxxg
  x.......x
  x.xxx.x.x
  x.x...x.x
  x.x.x.x.x
  x...w...x
  xxxxxxxxx`,
   map`
pxxxwxxxg
x...x...x
x.xxx.x.x
x.x..fx.x
xmx.x.x.x
x...w..mx
xxxxxxxxx`,
];

setMap(levels[level]);
setSolids([player, wall, spike, trap, mover]); // ❌ fakeWall not here (so passable!)

onInput("w", () => movePlayer(0,-1));
onInput("s", () => movePlayer(0,1));
onInput("a", () => movePlayer(-1,0));
onInput("d", () => movePlayer(1,0));

onInput("j", () => {
  if (level >= levels.length) {
    level = 0;
    deaths = 0;
    clearText();
    setMap(levels[level]);
  } else {
    clearText();
    setMap(levels[level]);
  }
});

function movePlayer(dx, dy) {
  const p = getFirst(player);
  if (!p) return;

  const nx = p.x + dx;
  const ny = p.y + dy;
  if (nx < 0 || ny < 0 || nx >= width() || ny >= height()) return;

  p.x = nx;
  p.y = ny;

  if (tilesWith(player, floor).length > 0) {
    const here = getFirst(player);
    clearTile(here.x, here.y);
    addSprite(here.x, here.y, spike);
    addSprite(here.x, here.y, player);
  }

  if (tilesWith(player, hidden).length > 0 || tilesWith(player, trap).length > 0 || tilesWith(player, spike).length > 0 || tilesWith(player, mover).length > 0) {
    deaths++;
    resetLevel();
    return;
  }

  if (tilesWith(player, goal).length > 0) {
    level++;
    const next = levels[level];
     if (next) {
    clearText();
    setMap(next);
  } else {
    clearText();
    addText("YOU SURVIVED!", { y: 4, color: color`2` });
    addText(`Deaths: ${deaths}`, { y: 6, color: color`3` });
    addText("Press J to restart", { y: 8, color: color`6` });
  }
  }

  moveSpikes();
}

function resetLevel() {
  clearText();
  setMap(levels[level]);
}

function moveSpikes() {
  const movers = getAll(mover);
  for (const m of movers) {
    const dirs = [[1,0],[-1,0],[0,1],[0,-1]];
    const [dx,dy] = dirs[Math.floor(Math.random()*dirs.length)];
    const nx = m.x + dx;
    const ny = m.y + dy;
    if (nx >= 0 && nx < width() && ny >= 0 && ny < height()) {
      if (getTile(nx, ny).length === 0) {
        clearTile(m.x, m.y);
        addSprite(nx, ny, mover);
      }
    }
  }
}
